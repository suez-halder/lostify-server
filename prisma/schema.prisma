// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userProfile UserProfile?
  foundItem   FoundItem[]
  claim       Claim[]
}

model FoundItemCategory {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  foundItem FoundItem?
}

model FoundItem {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  categoryId        String            @unique
  foundItemCaterogy FoundItemCategory @relation(fields: [categoryId], references: [id])
  foundItemName     String
  description       String
  location          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  claim             Claim?
}

model Claim {
  id                     String    @id @default(uuid())
  userId                 String
  user                   User      @relation(fields: [userId], references: [id])
  foundItemId            String    @unique
  foundItem              FoundItem @relation(fields: [foundItemId], references: [id])
  status                 Status
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
